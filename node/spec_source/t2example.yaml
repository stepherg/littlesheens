name: t2example
doc: none
parsepatterns: true
nodes:
  stop:
    branching:
      type: message
      branches:
        - pattern: |
            {"event":"start"}
          target: startup

  startup:
    actions:
      - interpreter: ecmascript
        source: |-
          var bs = _.bindings;
          var now = parseInt(Date.now()/1000)
          // register for RBUS events

          // decide whether tigger based or periodic
          _.log("set up trigger conditions");

          _.out({"ts":now, "did":"setup"});
          return _.bindings;
    branching:
      branches:
        - target: scheduleFirstInterval

  Task:
    actions:
      - interpreter: ecmascript
        source: |-
          var bs = _.bindings;

          _.log("Running task");
          // iterate over Paramaters in bs
          var params =  bs.parameters;

          for (var i = 0; i < params.length; i++) {
            //_.log(params[i].reference);
          }

          // get the RBUS stuff
          var now = parseInt(Date.now()/1000)
          _.out({"ts":now, "did":"task"});
          return _.bindings;
      #- type: RBUS
      #  method: GET
      #  paths: 
      #    - Device.DeviceInfo.Uptime
      #    - Device.DeviceInfo.SerialNumber
      #    - Device.DeviceInfo.Manufacturer
      #    - Device.DeviceInfo.ModelName

    branching:
      branches:
        - target: Idle

  scheduleFirstInterval:
    branching:
      branches:
        - target: 
            # set timer event
            timer: 
              delay: 3000
              id: timer-firstInterval
        - target: Task

  schedulePeriodic:
    branching:
      branches:
        # set periodic timer
        - target: 
            timer: 
              delay: 5000
              #delay: 86400
              id: timer-periodic
        - target: Task

  Idle:
    branching:
      type: message
      branches:
        - pattern: |
            {"event":"timer-firstInterval"}
          target: schedulePeriodic
        - pattern: |
            {"event":"timer-periodic"}
          target: schedulePeriodic
        - pattern: |
            {"event":"stop"}
          target: shutdown
        - pattern: |
            {"event":"trigger"}
          target: Task

  shutdown:
    action:
      interpreter: ecmascript
      source: |-
        var bs = _.bindings;
        var now = parseInt(Date.now()/1000)
        _.out({"ts":now, "did":"stopping"});
        return _.bindings;
    branching:
      branches:
        - target: stop

